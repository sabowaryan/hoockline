import { PromptOptions } from '../types/PromptOptions';
import { formats } from '../data/formats';
import { tones } from '../data/tones';
import { languages } from '../data/languages';
import { getConstraints, validateContent } from '../data/constraints';

// Cache pour √©viter les recherches r√©p√©t√©es
const formatCache = new Map(formats.map(f => [f.value.id, f]));
const toneCache = new Map(tones.map(t => [t.value, t]));
const languageCache = new Map(languages.map(l => [l.code, l]));

// Mapping sp√©cifique pour les noms dans les prompts (pluriels naturels en fran√ßais)
const formatNameMapping = {
  'tagline': 'slogans de startup',
  'formation': 'titres de formation',
  'app_store': 'descriptions d\'application',
  'hero_banner': 'titres principaux',
  'cta': 'boutons d\'action (CTA)',
  'slogan': 'accroches publicitaires',
  'ad_copy': 'publicit√©s persuasives',
  'tweet': 'tweets',
  'email': 'phrases d\'introduction',
  'onboarding': 'messages de bienvenue',
  'faq': 'r√©ponses aux objections'
} as const;

// Fonction pour obtenir le nom optimis√© pour le prompt
function getFormatNameForPrompt(formatId: string): string {
  return formatNameMapping[formatId as keyof typeof formatNameMapping] || formatId;
}

// Fonction pour g√©n√©rer les contraintes dynamiques bas√©es sur les r√®gles
function generateConstraintsText(constraints: any, language: string): string[] {
  const constraintsList: string[] = [];
  
  // Contraintes de base
  constraintsList.push(`1. ${constraints.minWords}-${constraints.maxWords} mots maximum par phrase`);
  constraintsList.push('2. Chaque mot doit √™tre strat√©gique, aucun mot inutile');
  constraintsList.push('3. Phrases ultra-m√©morables, faciles √† r√©p√©ter');
  constraintsList.push(`4. Parfaitement naturelles et idiomatiques en ${language}`);
  
  // Contraintes sp√©cifiques au format
  if (constraints.mustStartWithVerb) {
    constraintsList.push('5. OBLIGATOIRE: Commencer par un verbe d\'action √† l\'imp√©ratif');
  }
  
  if (constraints.requiresBenefit) {
    constraintsList.push('5. Inclure un b√©n√©fice client clair et tangible');
  }
  
  if (constraints.requiresUrgency) {
    constraintsList.push('6. Cr√©er un sentiment d\'urgence subtil mais efficace');
  }
  
  if (constraints.noCliches) {
    constraintsList.push('7. Z√©ro clich√©, pas de blabla marketing g√©n√©rique');
  }
  
  if (constraints.preferAlliteration) {
    constraintsList.push('8. Privil√©gier les allit√©rations et sons impactants');
  }
  
  if (constraints.maxSyllables) {
    constraintsList.push(`9. Maximum ${constraints.maxSyllables} syllabes au total`);
  }
  
  // Contraintes culturelles
  if (constraints.avoidAnglicisms) {
    constraintsList.push('10. √âviter les anglicismes, utiliser du fran√ßais pur');
  }
  
  if (constraints.allowsEmojis) {
    constraintsList.push('11. Emojis autoris√©s si ils renforcent le message');
  } else {
    constraintsList.push('11. Aucun emoji, texte pur uniquement');
  }
  
  return constraintsList;
}

// Fonction pour g√©n√©rer les techniques sp√©cifiques au format
function generateTechniques(constraints: any): string[] {
  const techniques: string[] = [
    '- Sons impactants : allit√©rations, r√©p√©titions',
    '- Rythme fluide : mots courts/longs altern√©s',
    '- Vocabulaire √©motionnel et b√©n√©fices clairs'
  ];
  
  if (constraints.requiresUrgency) {
    techniques.push('- Urgence subtile et moderne');
  }
  
  if (constraints.allowsWordplay) {
    techniques.push('- Jeux de mots cr√©atifs et m√©morables');
  }
  
  if (constraints.preferAlliteration) {
    techniques.push('- Allit√©rations pour un impact sonore');
  }
  
  if (constraints.requiresPersonalization) {
    techniques.push('- Personnalisation et proximit√© avec le lecteur');
  }
  
  if (constraints.requiresEngagement) {
    techniques.push('- D√©clencheurs d\'engagement et d\'interaction');
  }
  
  techniques.push('- R√©f√©rences culturelles pertinentes');
  
  return techniques;
}

// Fonction pour g√©n√©rer les exemples sp√©cifiques au format
function generateExamples(formatId: string): { good: string; bad: string } {
  const examples = {
    tagline: {
      good: 'G√©rez votre argent en un geste',
      bad: 'La meilleure application pour tous vos besoins financiers'
    },
    cta: {
      good: 'Commencez maintenant',
      bad: 'Cliquez ici pour d√©couvrir notre solution r√©volutionnaire'
    },
    tweet: {
      good: 'Stop aux emails perdus üìß',
      bad: 'Notre plateforme r√©volutionnaire va changer votre fa√ßon de travailler'
    },
    email: {
      good: 'Votre productivit√© va exploser',
      bad: 'Nous avons une solution innovante √† vous pr√©senter'
    },
    ad_copy: {
      good: '√âconomisez 3h par jour',
      bad: 'La meilleure solution du march√© pour optimiser votre temps'
    },
    hero_banner: {
      good: 'Cr√©ez sans limites',
      bad: 'Notre plateforme innovante vous permet de cr√©er tout ce que vous voulez'
    }
  };
  
  return examples[formatId as keyof typeof examples] || examples.tagline;
}

// Version optimis√©e pour la performance avec contraintes dynamiques
export function buildPrompt(options: PromptOptions): string {
  const format = formatCache.get(options.format);
  const tone = toneCache.get(options.tone);
  const language = languageCache.get(options.targetLanguage);
  
  if (!format || !tone || !language) {
    throw new Error(`Invalid options: format=${!!format}, tone=${!!tone}, language=${!!language}`);
  }

  // R√©cup√©ration des contraintes combin√©es
  const constraints = getConstraints(options.format, options.targetLanguage, options.tone);
  
  const languageCode = options.targetLanguage.split('-')[0];
  const verbs = tone.verbs[languageCode] ?? tone.verbs['fr'];
  const formatNameForPrompt = getFormatNameForPrompt(options.format);
  
  // G√©n√©ration dynamique des contraintes et techniques
  const constraintsList = generateConstraintsText(constraints, language.name);
  const techniques = generateTechniques(constraints);
  const examples = generateExamples(options.format);
  
  // Mots interdits sp√©cifiques
  const forbiddenWords = constraints.forbiddenWords || [];
  const avoidSuperlatives = constraints.avoidSuperlatives || [];
  
  // Utilisation d'un array puis join() pour √©viter les concat√©nations multiples
  const parts = [
    `Tu es un ${format.role} expert de haut niveau, sp√©cialis√© dans la cr√©ation de contenu pour ${format.platform}.`,
    `${format.roleDescription}, multilingue, expert en psychologie du consommateur et en nuances culturelles locales. Tu cr√©es des phrases d'accroche qui convertissent imm√©diatement.`,
    '',
    'üéØ OBJECTIF :',
    `G√©n√®re exactement 10 ${formatNameForPrompt} irr√©sistibles pour le concept suivant :`,
    `"${options.concept}"`,
    '',
    `üó£Ô∏è LANGUE DE SORTIE : ${language.name.toUpperCase()}`,
    `üé≠ TON REQUIS : ${tone.label.toUpperCase()}`,
    `Utilisez les verbes d'action : ${verbs.join(', ')}`,
    '',
    'üìè CONTRAINTES STRICTES :',
    ...constraintsList,
    `Culturellement adapt√©es √† la langue cible (${language.culturalNotes.join(', ')})`,
    '',
    'üí° TECHNIQUES √Ä UTILISER :',
    ...techniques,
    '',
    'üß™ EXEMPLES :',
    `‚úÖ Bon : "${examples.good}"`,
    `‚ùå Mauvais : "${examples.bad}"`,
    '',
    'üö´ √Ä √âVITER ABSOLUMENT :',
    '- G√©n√©ralit√©s sans impact ("La meilleure solution", etc.)',
    ...(avoidSuperlatives.length > 0 ? [`- Superlatifs vagues (${avoidSuperlatives.join(', ')})`] : []),
    ...(forbiddenWords.length > 0 ? [`- Mots interdits (${forbiddenWords.join(', ')})`] : []),
    '- Jargon technique froid',
    '- Traductions maladroites',
    ...(constraints?.avoidAnglicisms ? ['- Anglicismes et termes non-fran√ßais'] : []),
    '',
    '‚úÖ TEST FINAL POUR CHAQUE PHRASE :',
    `> "Est-ce que cette phrase me donne vraiment envie d'agir (cliquer, acheter, tester), dans la culture ${language.name} ?"`,
    ...(constraints?.mustStartWithVerb ? ['> "Est-ce que √ßa commence bien par un verbe d\'action √† l\'imp√©ratif ?"'] : []),
    ...(constraints?.requiresBenefit ? ['> "Le b√©n√©fice client est-il clair et imm√©diat ?"'] : []),
    '',
    'üì§ FORMAT DE SORTIE OBLIGATOIRE :',
    `R√©ponds UNIQUEMENT avec les 10 ${formatNameForPrompt}, en ${language.name}, un par ligne, sans num√©rotation, sans commentaires ni balises.`,
    '',
    'G√âN√àRE MAINTENANT :'
  ];
  
  return parts.join('\n');
}

// Fonction pour valider le concept avant g√©n√©ration
export function validateConcept(options: PromptOptions): { isValid: boolean; errors: string[]; warnings: string[] } {
  const constraints = getConstraints(options.format, options.targetLanguage, options.tone);
  const validation = validateContent(options.concept, constraints);
  
  const warnings: string[] = [];
  
  // Avertissements sp√©cifiques
  if (options.concept.length < 10) {
    warnings.push('Concept tr√®s court - consid√©rez ajouter plus de contexte');
  }
  
  if (options.concept.includes('startup') && options.format === 'formation') {
    warnings.push('Format "formation" peu adapt√© pour une startup');
  }
  
  if (constraints?.mustStartWithVerb && options.format === 'cta') {
    warnings.push('N\'oubliez pas: les CTA doivent commencer par un verbe d\'action');
  }
  
  return {
    isValid: validation.isValid,
    errors: validation.errors,
    warnings
  };
}

// Export du mapping et fonctions utilitaires
export { 
  formatNameMapping, 
  getFormatNameForPrompt, 
  generateConstraintsText,
  generateTechniques,
  generateExamples
};